plot(smoothed_ts)
# Afficher les composantes décomposées
plot(decomposition)
deseasoned_cnt <- smoothed_ts - decomposition$seasonal
# Afficher les autocorrélations et autocorrélations partielles
acf_deseasoned <- acf(deseasoned_cnt, plot = TRUE)
#/////////////////////////////////////////// 4
#4.1
# Supposons que votre série temporelle est stockée dans un objet ts_data
decomposition <- decompose(ts_data)
# Afficher les composantes décomposées
plot(decomposition)
deseasoned_cnt <- ts_data - decomposition$seasonal
# Afficher les autocorrélations et autocorrélations partielles
acf_deseasoned <- acf(deseasoned_cnt, plot = TRUE)
pacf_deseasoned <- pacf(deseasoned_cnt, plot = TRUE)
#/////////////////////////////////////////// 4
#4.1
# Supposons que votre série temporelle est stockée dans un objet ts_data
decomposition <- decompose(smoothed_ts)
print(smoothed_ts)
plot(smoothed_ts)
# Afficher les composantes décomposées
plot(decomposition)
deseasoned_cnt <- ts_data - decomposition$seasonal
deseasoned_cnt <- smoothed_ts - decomposition$seasonal
# Afficher les autocorrélations et autocorrélations partielles
acf_deseasoned <- acf(deseasoned_cnt, plot = TRUE)
# Différenciation une fois de la série temporelle désaisonnalisée
diff_deseasoned_cnt <- diff(deseasoned_cnt)
# Afficher les autocorrélations et autocorrélations partielles de la série différenciée
acf_diff_deseasoned <- acf(diff_deseasoned_cnt, plot = TRUE)
# Afficher les autocorrélations et autocorrélations partielles
acf_deseasoned <- acf(deseasoned_cnt, plot = TRUE)
# Afficher les autocorrélations et autocorrélations partielles de la série différenciée
acf_diff_deseasoned <- acf(diff_deseasoned_cnt, plot = TRUE)
# ACF plot for the deseasoned time series
acf_deseasoned <- acf(as.numeric(deseasoned_cnt), main="ACF - Deseasoned Time Series")
# PACF plot for the deseasoned time series
pacf_deseasoned <- pacf(as.numeric(deseasoned_cnt), main="PACF - Deseasoned Time Series")
# Plot both ACF and PACF in the same window
par(mfrow=c(2,1))
# ACF plot for the deseasoned time series
acf_deseasoned <- acf(as.numeric(deseasoned_cnt), main="ACF - Deseasoned Time Series")
# PACF plot for the deseasoned time series
pacf_deseasoned <- pacf(as.numeric(deseasoned_cnt), main="PACF - Deseasoned Time Series")
# Différenciation une fois de la série temporelle désaisonnalisée
diff_deseasoned_cnt <- diff(deseasoned_cnt)
# ACF plot for the differenced deseasoned series
acf_diff_deseasoned <- acf(as.numeric(diff_deseasoned_cnt), main="ACF - Differenced Deseasoned Time Series", plot = FALSE)
# ACF plot for the differenced deseasoned series
acf_diff_deseasoned <- acf(as.numeric(diff_deseasoned_cnt), main="ACF - Differenced Deseasoned Time Series", plot = FALSE)
# PACF plot for the differenced deseasoned series
pacf_diff_deseasoned <- pacf(as.numeric(diff_deseasoned_cnt), main="PACF - Differenced Deseasoned Time Series", plot = FALSE)
# Plot both ACF and PACF in the same window
par(mfrow=c(2,1))
plot(acf_diff_deseasoned, main="ACF and PACF - Differenced Deseasoned Time Series")
plot(pacf_diff_deseasoned, main="")
#fit
de_arima_model_1 <- arima(diff_deseasoned_cnt, order = c(0,1,4))
de_arima_model_1 <- arima(diff_deseasoned_cnt, order = c(0,1,4))
de_arima_model_1 <- arima(deseasoned_cnt, order = c(0,1,4))
#fit
de_arima_model_1 <- arima(ts_data, order = c(0,1,4))
de_arima_model_2 <- arima(ts_data, order = c(4,1,0))
de_arima_model_3 <- arima(ts_data, order
#fit
de_arima_model_1 <- arima(ts_data, order = c(0,1,4))
de_arima_model_1 <- arima(ts_data, order = c(0,1,4))
de_arima_model_2 <- arima(ts_data, order = c(4,1,0))
de_arima_model_3 <- arima(ts_data, order = c(4,1,4))
# Calculate AIC and BIC for each model
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(4,1,0)", "ARIMA(4,1,4)"),
AIC = c(AIC(de_arima_model_1), AIC(de_arima_model_2), AIC(de_arima_model_3)),
BIC = c(BIC(de_arima_model_1), BIC(de_arima_model_2), BIC(de_arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
# Calculate RMSE for each model
rmse_custom_1 <- sqrt(mean((diff_deseasoned_cnt - fitted(de_arima_model_1))^2))
rmse_custom_2 <- sqrt(mean((diff_deseasoned_cnt - fitted(de_arima_model_2))^2))
rmse_custom_3 <- sqrt(mean((diff_deseasoned_cnt - fitted(de_arima_model_3))^2))
# Print RMSE for each model
cat("RMSE ARIMA(0,1,4):", rmse_custom_1, "\n")
cat("RMSE ARIMA(4,1,0):", rmse_custom_2, "\n")
cat("RMSE ARIMA(4,1,4):", rmse_custom_3, "\n")
par(mfrow=c(2,1))
plot(acf_deseasoned, main="ACF and PACF - Deseasoned Time Series")
plot(pacf_deseasoned, main="")
par(mfrow=c(2,1))
plot(acf_diff_deseasoned, main="ACF and PACF - Differenced Deseasoned Time Series")
plot(pacf_diff_deseasoned, main="")
# Re
auto_arima_model <- auto.arima(deseasoned_cnt)
auto_arima_model <- auto.arima(ts_data)
auto_arima_model <- auto.arima(smoothed_ts)
# Plot residuals
plot(residuals, main = "Residuals of Auto-ARIMA Model", ylab = "Residuals")
auto_arima_model <- auto.arima(smoothed_ts)
auto_arima_model <- auto.arima(ts_data)
de_arima_model_1 <- arima(smoothed_ts, order = c(0,1,4))
de_arima_model_2 <- arima(ts_data, order = c(4,1,0))
de_arima_model_3 <- arima(ts_data, order = c(4,1,4))
de_arima_model_1 <- arima(smoothed_ts, order = c(0,1,4))
de_arima_model_1 <- arima(tf(smoothed_ts), order = c(0,1,4))
de_arima_model_1 <- arima(ts(smoothed_ts), order = c(0,1,4))
smoothed_ts2<-ts(smoothed_ts$cnt, frequency = 365)
smoothed_ts2<-ts(smoothed_ts, frequency = 365)
de_arima_model_1 <- arima(smoothed_ts2, order = c(0,1,4))
de_arima_model_2 <- arima(ts_data, order = c(4,1,0))
#/////////////////////////////////////////// 4
#4.1
# Supposons que votre série temporelle est stockée dans un objet ts_data
decomposition <- decompose(smoothed_ts)
auto_arima_model <- auto.arima(smoothed_ts)
#////////////////////////////////////////////////////////
# Fit ARIMA(0,1,5) model
arima_model_1 <- arima(hw_model, order = c(0,1,4))
#////////////////////////////////////////////////////////
# Fit ARIMA(0,1,5) model
arima_model_1 <- arima(as.numeric(smoothed_ts), order = c(0,1,4))
# Fit ARIMA(4,1,0) model
arima_model_2 <- arima(as.numeric(smoothed_ts), order = c(5,1,0))
# Fit ARIMA(4,1,5) model
arima_model_3 <- arima(as.numeric(smoothed_ts), order = c(5,1,4))
# Calculate AIC and BIC for each model
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(5,1,0)", "ARIMA(5,1,4)"),
AIC = c(AIC(arima_model_1), AIC(arima_model_2), AIC(arima_model_3)),
BIC = c(BIC(arima_model_1), BIC(arima_model_2), BIC(arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
# Calculate RMSE for each model
rmse_1 <- sqrt(mean((de_seasonal_cnt_imputed - fitted(arima_model_1))^2))
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(5,1,0)", "ARIMA(5,1,4)"),
AIC = c(AIC(arima_model_1), AIC(arima_model_2), AIC(arima_model_3)),
BIC = c(BIC(arima_model_1), BIC(arima_model_2), BIC(arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
# Calculate RMSE for each model
rmse_1 <- sqrt(mean((as.numeric(smoothed_ts) - fitted(arima_model_1))^2))
rmse_2 <- sqrt(mean((as.numeric(smoothed_ts) - fitted(arima_model_2))^2))
rmse_3 <- sqrt(mean((as.numeric(smoothed_ts) - fitted(arima_model_3))^2))
# Print RMSE for each model
cat("RMSE ARIMA(0,1,4):", rmse_1, "\n")
cat("RMSE ARIMA(5,1,0):", rmse_2, "\n")
cat("RMSE ARIMA(5,1,4):", rmse_3, "\n")
#/////////////////////////////////////////// 4
#4.1
# Supposons que votre série temporelle est stockée dans un objet ts_data
decomposition <- decompose(smoothed_ts)
plot(smoothed_ts)
# Afficher les composantes décomposées
plot(decomposition)
deseasoned_cnt <- smoothed_ts - decomposition$seasonal
# ACF plot for the deseasoned time series
acf_deseasoned <- acf(as.numeric(deseasoned_cnt), main="ACF - Deseasoned Time Series")
# PACF plot for the deseasoned time series
pacf_deseasoned <- pacf(as.numeric(deseasoned_cnt), main="PACF - Deseasoned Time Series")
# Plot both ACF and PACF in the same window
par(mfrow=c(2,1))
plot(acf_deseasoned, main="ACF and PACF - Deseasoned Time Series")
de_arima_model_1 <- arima(as.numeric(deseasoned_cnt), order = c(0,1,4))
de_arima_model_2 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,0))
de_arima_model_3 <- arima(as.nume
de_arima_model_1 <- arima(as.numeric(deseasoned_cnt), order = c(0,1,4))
de_arima_model_1 <- arima(as.numeric(deseasoned_cnt), order = c(0,1,4))
de_arima_model_2 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,0))
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
# Calculate AIC and BIC for each model
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(4,1,0)", "ARIMA(4,1,4)"),
AIC = c(AIC(de_arima_model_1), AIC(de_arima_model_2), AIC(de_arima_model_3)),
BIC = c(BIC(de_arima_model_1), BIC(de_arima_model_2), BIC(de_arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
# Calculate RMSE for each model
rmse_custom_1 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_1))^2))
rmse_custom_2 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_2))^2))
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
# Print RMSE for each model
cat("RMSE ARIMA(0,1,4):", rmse_custom_1, "\n")
cat("RMSE ARIMA(4,1,0):", rmse_custom_2, "\n")
cat("RMSE ARIMA(4,1,4):", rmse_custom_3, "\n")
auto_arima_model <- auto.arima(as.numeric(deseasoned_cnt))
# Check residuals
residuals <- resid(auto_arima_model)
# Plot residuals
plot(residuals, main = "Residuals of Auto-ARIMA Model", ylab = "Residuals")
# Check ACF and PACF of residuals
acf_res <- acf(residuals, main = "ACF of Residuals")
pacf_res <- pacf(residuals, main = "PACF of Residuals")
# Reset the plotting layout
par(mfrow=c(1,1))
# Plot residuals
plot(residuals, main = "Residuals of Auto-ARIMA Model", ylab = "Residuals")
acf_res <- acf(residuals, main = "ACF of Residuals")
pacf_res <- pacf(residuals, main = "PACF of Residuals")
print(residuals)
print(acf_res)
print(pacf_res)
# Afficher les résidus du modèle de_arima_model_3
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher les résidus du modèle auto_arima_model
residuals_auto_arima_model <- residuals(auto_arima_model)
plot(residuals_auto_arima_model, main="Residuals of auto_arima_model")
#4.3
# Afficher les résidus du modèle de_arima_model_3
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher les résidus du modèle auto_arima_model
residuals_auto_arima_model <- residuals(auto_arima_model)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
#4.3
# Afficher les résidus du modèle de_arima_model_3
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher les résidus du modèle auto_arima_model
residuals_auto_arima_model <- residuals(arima_model_3)
plot(residuals_auto_arima_model, main="Residuals of auto_arima_model")
# Afficher les résidus du modèle de_arima_model_3
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher les résidus du modèle auto_arima_model
residuals_auto_arima_model <- residuals(auto_arima_model)
plot(residuals_auto_arima_model, main="Residuals of auto_arima_model")
# Afficher les résidus du modèle auto_arima_model
residuals_auto_arima_model <- residuals(arima_model_3)
plot(residuals_auto_arima_model, main="Residuals of auto_arima_model")
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher les résidus du modèle auto_arima_model
residuals_arima_model_3 <- residuals(arima_model_3)
plot(residuals_auto_arima_model, main="Residuals of auto_arima_model")
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
par(mfrow=c(1,2))
acf(residuals_arima_model_3, main="ACF of Residuals residuals_arima_model_3")
pacf(residuals_arima_model_3, main="PACF of Residuals residuals_arima_model_3")
aic <- AIC(auto_arima_model)
bic <- BIC(auto_arima_model)
rmse <- sqrt(mean(residuals^2))
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
cat("RMSE:", rmse, "\n")
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(5,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,3))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
# Calculate AIC and BIC for each model
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(4,1,0)", "ARIMA(4,1,4)"),
AIC = c(AIC(de_arima_model_1), AIC(de_arima_model_2), AIC(de_arima_model_3)),
BIC = c(BIC(de_arima_model_1), BIC(de_arima_model_2), BIC(de_arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE ARIMA(4,1,4):", rmse_custom_3, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
train_data <- window(original_data, start = c(1, 1), end = c(2, 335))
train_data <- window(ts_data, start = c(1, 1), end = c(2, 335))
test_data <- window(ts_data, start = c(2, 336))
# Fit an auto ARIMA model on the training data
auto_arima_model <- auto.arima(train_data)
# Forecast the next 25 observations
forecast_auto <- forecast(auto_arima_model, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
# Plot the original values for test data with a different color
plot(original_data, main = "Original Time Series (All Data)", col = "blue")
par(mfrow=c(1,1))
#4.4
train_data <- window(ts_data, start = c(1, 1), end = c(2, 335))
test_data <- window(ts_data, start = c(2, 336))
# Fit an auto ARIMA model on the training data
auto_arima_model <- auto.arima(train_data)
# Forecast the next 25 observations
forecast_auto <- forecast(auto_arima_model, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
# Plot the original values for test data with a different color
plot(original_data, main = "Original Time Series (All Data)", col = "blue")
#with manual arima , use de_arima_model_3
forecast_manual <- forecast(de_arima_model_3, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
hw1_model <- HoltWinters(train_data, gamma = FALSE)
train_ts <- hw1_model$fitted
decomposition <- decompose(train_ts)
deseasoned_cnt_manual <- train_ts - decomposition$seasonal
#with manual arima , use de_arima_model_3
arima_manual <- arima(as.numeric(deseasoned_cnt_manual), order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
hw1_model <- HoltWinters(train_data, gamma = FALSE)
train_ts <- hw1_model$fitted
decomposition <- decompose(train_ts)
deseasoned_cnt_manual <- train_ts - decomposition$seasonal
#with manual arima , use de_arima_model_3
arima_manual <- arima(as.numeric(deseasoned_cnt_manual), order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
install.packages("kableExtra")
install.packages("kableExtra")
shiny::runApp('C:/Users/jm_be/OneDrive/Bureau/projet_shyni_app/shiny_data_analysis')
shiny::runApp()
install.packages("kableExtra")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
