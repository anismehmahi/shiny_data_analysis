pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(5,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,3))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
# Calculate AIC and BIC for each model
aic_bic <- data.frame(
Model = c("ARIMA(0,1,4)", "ARIMA(4,1,0)", "ARIMA(4,1,4)"),
AIC = c(AIC(de_arima_model_1), AIC(de_arima_model_2), AIC(de_arima_model_3)),
BIC = c(BIC(de_arima_model_1), BIC(de_arima_model_2), BIC(de_arima_model_3))
)
# Print AIC and BIC
print(aic_bic)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE ARIMA(4,1,4):", rmse_custom_3, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,4))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,6))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
#augmenter q de de_arima_model_3
de_arima_model_3 <- arima(as.numeric(deseasoned_cnt), order = c(4,1,5))
residuals_de_arima_model_3 <- residuals(de_arima_model_3)
plot(residuals_de_arima_model_3, main="Residuals of de_arima_model_3")
# Afficher ACF et PACF des résidus de_de_arima_model_3
par(mfrow=c(1,2))
acf(residuals_de_arima_model_3, main="ACF of Residuals de_arima_model_3")
pacf(residuals_de_arima_model_3, main="PACF of Residuals de_arima_model_3")
aic <- AIC(de_arima_model_3)
bic <- BIC(de_arima_model_3)
rmse_custom_3 <- sqrt(mean((as.numeric(deseasoned_cnt) - fitted(de_arima_model_3))^2))
cat("RMSE:", rmse_custom_3, "\n")
# Print the results
cat("AIC:", aic, "\n")
cat("BIC:", bic, "\n")
train_data <- window(original_data, start = c(1, 1), end = c(2, 335))
train_data <- window(ts_data, start = c(1, 1), end = c(2, 335))
test_data <- window(ts_data, start = c(2, 336))
# Fit an auto ARIMA model on the training data
auto_arima_model <- auto.arima(train_data)
# Forecast the next 25 observations
forecast_auto <- forecast(auto_arima_model, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
# Plot the original values for test data with a different color
plot(original_data, main = "Original Time Series (All Data)", col = "blue")
par(mfrow=c(1,1))
#4.4
train_data <- window(ts_data, start = c(1, 1), end = c(2, 335))
test_data <- window(ts_data, start = c(2, 336))
# Fit an auto ARIMA model on the training data
auto_arima_model <- auto.arima(train_data)
# Forecast the next 25 observations
forecast_auto <- forecast(auto_arima_model, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
# Plot the original values for test data with a different color
plot(original_data, main = "Original Time Series (All Data)", col = "blue")
#with manual arima , use de_arima_model_3
forecast_manual <- forecast(de_arima_model_3, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
hw1_model <- HoltWinters(train_data, gamma = FALSE)
train_ts <- hw1_model$fitted
decomposition <- decompose(train_ts)
deseasoned_cnt_manual <- train_ts - decomposition$seasonal
#with manual arima , use de_arima_model_3
arima_manual <- arima(as.numeric(deseasoned_cnt_manual), order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
hw1_model <- HoltWinters(train_data, gamma = FALSE)
train_ts <- hw1_model$fitted
decomposition <- decompose(train_ts)
deseasoned_cnt_manual <- train_ts - decomposition$seasonal
#with manual arima , use de_arima_model_3
arima_manual <- arima(as.numeric(deseasoned_cnt_manual), order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
#with manual arima , use de_arima_model_3
arima_manual <- arima(train_data, order = c(4,1,4))
forecast_manual <- forecast(arima_manual, h = 25)
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(test_data, col = "red")
lines(forecast_manual$mean, col = "red")
# Plot the original values for test data with a different color
plot(train_data, main = "Original Time Series (All Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
# Plot both the original and forecasted time series for training data
plot(train_data, main = "Original and Forecasted Time Series (Training Data)", col = "blue")
lines(forecast_auto$mean, col = "red")
plot(train_data, main = "Original and Fo
recasted Time Series (Training Data)", col = "blue")
lines(forecast_manual$mean, col = "red")
install.packages("kableExtra")
install.packages("kableExtra")
shiny::runApp('C:/Users/jm_be/OneDrive/Bureau/projet_shyni_app/shiny_data_analysis')
shiny::runApp()
install.packages("kableExtra")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
=======
install.packages("renv")
library(renv)
renv::init()
renv::restore()
renv::status()
renv::init()
source("ui.R")
install.packages("shiny")
install_deps_file(directory = getwd())
getwd()
ls
clear
cls
shiny::runApp()
runApp()
runApp()
remotes::install_github("deepanshu88/shinyDarkmode")
install.packages('remotes')
remotes::install_github("deepanshu88/shinyDarkmode")
runApp()
>>>>>>> 0ac408d46c1eab4c0c913f6fa33d9c26675eaa09
shiny::runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
library(shinyjs)
library(shiny)
library(DT)
library(shinyjs)
# constants
github.url <- 'https://github.com/indrapaul824/interactive_data_analyser'
# Disable shiny widget, from:
# https://groups.google.com/forum/#!topic/shiny-discuss/uSetp4TtW-s
disable <- function(x) {
if (inherits(x, 'shiny.tag')) {
if (x$name %in% c('input', 'select'))
x$attribs$disabled <- 'disabled'
x$children <- disable(x$children)
}
else if (is.list(x) && length(x) > 0) {
for (i in 1:length(x))
x[[i]] <- disable(x[[i]])
}
x
}
# function to generate the complete model summary in a single string
completeModelSummary <- function() {
'TODO - This will be the model summary'
}
shinyUI(
fluidPage(titlePanel('Projet Programmation Web'),
navbarPage('',
#tabPanel('0. About',
# Problem Description
# tabPanel('0. About',
#          fluidPage(
#            titlePanel(p("About the Project", style = "color:#3474A7")),
#            h4('Summary'),
#            p('This Shiny App is an Automated Platform that helps user to automate data visualization
#                 and model training evaluation on different machine learning models as applied to the selected Data of Choice'),
#            br(), br(),
#            h4('Steps to complete and evaluate a machine learning model'),
#            tags$ol(
#              tags$li('Select the data - choose the data you want to use'),
#              tags$li('Examine the data summary - see what is in the data'),
#              tags$li('Explore the data - see what features to use in a model'),
#              tags$li('Build a prediction model - pre-process data, select features, and generate model'),
#              tags$li('Evaluate prediction model - estimate in-sample and out-of-sample errors'),
#              tags$li('Predict outcomes for test data')
#            ),
#            br(), br(),
#            h4('Source Code and some sample data available'),
#            a(github.url),
#            br(), br(),
#            br(), br()
#          )
# ),
# upload the data and display a preview
tabPanel('1. Upload',
fluidPage(
titlePanel(p("Upload the Data", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
fileInput(inputId = "upload",
label = "Upload data (.csv file only!)",
accept = c(".csv")),
br(),
uiOutput("target")
),
mainPanel(
#   h4('Data Uploaded:'),
#   tableOutput("files"),
# br(), br(),
h4('Data Preview:'),
DTOutput("head")
)
)
)
),
# show data summary of all data - give options to see raw or processed data
# separate outcomes from predictors
tabPanel('2. Data Summary',
titlePanel(p("Data Summary", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
uiOutput(outputId = "dropSelected"),
actionButton("drop", "Drop Columns"),
br(), br(),
p("Press the button below to conduct basic preprocessing:"),
p("1. Remove rows with missing data, 2. Label Encode character data"),
actionButton("preprocess", "Preprocess Data")
),
mainPanel(
h4('Features'),
tableOutput('PredictorsSummaryOut'),
br(), br(),
h4('Target'),
tableOutput('OutcomeSummaryOut')
)
)
),
# explore the data
tabPanel('3. Explore Data',
sidebarLayout(
sidebarPanel(
selectInput('singlePlotGeom', 'Select plot type',
choices=c('point', 'boxplot', 'histogram', 'density', 'jitter'),
selected='jitter'),
uiOutput('expXaxisVarSelector'),
uiOutput('expYaxisVarSelector'),
uiOutput('expColorVarSelector'),
selectInput('statisticalTest', 'Select statistical test',
choices=c('Chi-squared (khi2)', 'ANOVA', 'Correlation Matrix'),
selected='Correlation Matrix'),
# Utilise le toggle switch à la place du slider
useShinyjs(),  # Active shinyjs
switchInput('toggle', 'Activer le toggle', onlabel = 'Oui', offlabel = 'Non', value = FALSE)
),
mainPanel(
h4('One and Two Variable Plot'),
plotOutput('expSinglePlot'),
h4('Metric results'),
verbatimTextOutput("metricResults"),
h4('Pairs Plot (only non-zero variance variables shown)'),
plotOutput('expPairsPlot', width='100%', height='800px'),
)
)
),
# build model
tabPanel('4. Build Prediction Model',
sidebarLayout(
sidebarPanel(
selectInput('preProcessMethods', 'Select data preprocessing method(s)',
choices=c(
'Center Data' = 'center',
'Scale Data' = 'scale',
'Box Cox Transform Data' = 'BoxCox',
'Yeo-Johnson Transform Data' = 'YeoJohnson',
'Inpute missing data with k-nearest neighbors' = 'knnImpute',
'Principle Component Analysis (95% variance)' = 'pca'
),
selected='BoxCox',
multiple=TRUE
),
uiOutput('featureSelectInput'),
sliderInput("fracTrain", label = h4("Train Split %"), min=10, max=100, value=75, step=10),
br(),
radioButtons('mltype', "Choose the type of the task:",
choices = c("Regression"="reg", "Classification"="clf"),
selected = "reg"),
uiOutput('machAlgorithm')
),
mainPanel(
h4('Training / Test Split'),
verbatimTextOutput('cntTrain'),
verbatimTextOutput('cntTest'),
h4('Final model fit'),
verbatimTextOutput('finalModel'),
h4('Feature Importance'),
verbatimTextOutput('featureImportance')
)
)
),
# Evaluate model
tabPanel('5. Model Evaluation',
fluidRow(
column(6,
wellPanel(
h4('Estimated In Sample Accuracy (within training data)'),
verbatimTextOutput('inSampleAccuracy'),
plotOutput("inSamplePlot")
)
),
column(6,
wellPanel(
h4('Estimated Out of Sample Accuracy (within verification data)'),
verbatimTextOutput('outOfSampleAccuracy'),
plotOutput("outOfSamplePlot")
)
)
)
)
)
)
)
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
=======
shiny::runApp()
>>>>>>> 0ac408d46c1eab4c0c913f6fa33d9c26675eaa09
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("plotly")
install.packages("plotly")
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
